<?xml version="1.0" encoding="UTF-8"?>

<!-- 
    mor data
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="Chat.g">
        <![CDATA[
mor
    :    MOR_START morattr+ morchoice menx* gra* morseq* MOR_END
    ->    ^(MOR_START morattr+ morchoice menx* gra* morseq*)
    ;
    
morattr
    :    MOR_ATTR_TYPE
    |    MOR_ATTR_OMITTED
    ;
    
morchoice
    :    mw
    |    mwc
    |    mt
    ;
    
morseq
    :    mor_pre
    |    mor_post
    ;
    
mor_pre
    :    MOR_PRE_START morchoice menx* gra* MOR_PRE_END
    ->    ^(MOR_PRE_START morchoice menx* gra*)
    ;
    
mor_post
    :    MOR_POST_START morchoice menx* gra* MOR_POST_END
    ->    ^(MOR_POST_START morchoice menx* gra*)
    ;
    
menx
    :    MENX_START TEXT MENX_END
    ->    ^(MENX_START TEXT)
    ;
    
gra
    :    GRA_START graattrs+ GRA_END
    ->    ^(GRA_START graattrs+)
    ;
    
graattrs
    :    GRA_ATTR_TYPE
    |    GRA_ATTR_INDEX
    |    GRA_ATTR_HEAD
    |    GRA_ATTR_RELATION
    ;
    
mw
    :    MW_START mpfx* pos stem mk* MW_END
    ->    ^(MW_START mpfx* pos stem mk*)
    ;
    
mwc
    :    MWC_START mpfx* pos mw+ MWC_END
    ->    ^(MWC_START mpfx* pos mw+)
    ;
    
mt
    :    MT_START MT_ATTR_TYPE MT_END
    ->    ^(MT_START MT_ATTR_TYPE)
    ;
    
mpfx
    :    MPFX_START TEXT MPFX_END
    ->    ^(MPFX_START TEXT)
    ;
   
pos
    :    POS_START morposc morposs* POS_END
    ->    ^(POS_START morposc morposs*)
    ;
    
morposc
    :    C_START TEXT C_END
    ->    ^(C_START TEXT)
    ;
    
morposs
    :    S_START TEXT S_END
    ->    ^(S_START TEXT)
    ;
    
stem
    :    STEM_START TEXT STEM_END
    ->    ^(STEM_START TEXT);
    
mk
    :    MK_START MK_ATTR_TYPE TEXT MK_END
    ->    ^(MK_START MK_ATTR_TYPE TEXT)
    ;
    

]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="ChatTree.g">
        <![CDATA[
mor returns [String tierName, String val]
scope
{
    List<String> morPres;
    List<String> morPosts;
    List<String> menxVals;
    
    String morType;
    Boolean morOmitted;
}
@init
{
    $mor::morPres = new ArrayList<String>();
    $mor::morPosts = new ArrayList<String>();
    $mor::menxVals = new ArrayList<String>();
    
    $mor::morType = "mor";
    $mor::morOmitted = Boolean.FALSE;
}
    :    ^(MOR_START morattr+ morchoice menx* gra* morseq*)
    {
        $tierName = ($mor::morType.equals("mor") ? "Morphology" : "trn");
 
        // build mor-string
		String v = $morchoice.val;
		for(String menxVal:$mor::menxVals) {
		    v += "=" + menxVal;
		}
		for(String morPre:$mor::morPres) {
		    v = morPre + "$" + v;
		}
		for(String morPost:$mor::morPosts) {
		    v += "~" + morPost;
		}
		
		// if omitted, add the '0'
		if($mor::morOmitted) {
		    v = "0" + v;
		}
		
		$val = v;
    }
    ;
    
morattr
    :    MOR_ATTR_TYPE
    {    $mor::morType = $MOR_ATTR_TYPE.text;    }
    |    MOR_ATTR_OMITTED
    {    $mor::morOmitted = new Boolean($MOR_ATTR_OMITTED.text);    }
    ;
    
morchoice returns [String val]
    :    mw
    {    $val = $mw.val;    }
    |    mwc
    {    $val = $mwc.val;    }
    |    mt
    {    $val = $mt.val;    }
    ;
    
morseq returns [String val]
    :    mor_pre
    {    $val = $mor_pre.val;    }
    |    mor_post
    {    $val = $mor_post.val;    }
    ;
    
mor_pre returns [String val]
scope
{
    List<String> menxVals;
}
@init
{
    $mor_pre::menxVals = new ArrayList<String>();
}
@after
{
    $mor::morPres.add($val);
}
    :    ^(MOR_PRE_START morchoice menx* gra*)
    {
        $val = $morchoice.val;
        for(String menxVal:$mor_pre::menxVals) {
            $val += "=" + menxVal;
        }
    }
    ;
    
mor_post returns [String val]
scope
{
    List<String> menxVals;
}
@init
{
    $mor_post::menxVals = new ArrayList<String>();
}
@after
{
    $mor::morPosts.add($val);
}
    :    ^(MOR_POST_START morchoice menx* gra*)
    {
        $val = $morchoice.val;
        for(String menxVal:$mor_post::menxVals) {
            $val += "=" + menxVal;
        }
    }
    ;
    
menx returns [String val]
@after
{
    if($mor_pre.size() > 0) {
        $mor_pre::menxVals.add($val);
    } else if($mor_post.size() > 0) {
        $mor_post::menxVals.add($val);
    } else if($mor.size() > 0) {
        $mor::menxVals.add($val);
    }
}
    :    ^(MENX_START TEXT)
    {
        $val = $TEXT.text;
    }
    ;

gra returns [String val]
scope
{
    String type;
    String index;
    String head;
    String relation;
}
    :    ^(GRA_START graattrs+)
    {
        // make sure dep tier exists in session
		TierDescription tierDesc = null;
		for(TierDescription current:session.getUserTiers())
		{
			if(current.getName().equals("GRASP"))
			{
				tierDesc = current;
				break;
			}
		}
		
		if(tierDesc == null) {
			// create the new tier
			tierDesc = sessionFactory.createTierDescription("GRASP", true, String.class);
			session.addUserTier(tierDesc);

            TierViewItem tvi = sessionFactory.createTierViewItem("GRASP", true, "default");
            List<TierViewItem> tierView = session.getTierView();
            tierView.add(tvi);
            session.setTierView(tierView);
		}
		
		// value
		$val = $gra::index + "|" + $gra::head + "|" + $gra::relation;
		
		// add mor data as a dep tier of the current word(group)
		Group group = null;
		// get the correct word group holder
		if($t.size() > 0 || $ugrp.size() > 0) {
		    group = ($t.size() > 0 ? $t::g : $ugrp::g);
		} else if($u.size() > 0) {
		    group = $u::r.getGroup($u::r.numberOfGroups()-1);
		}
		
		String tierValue = group.getTier("GRASP", String.class);
		if(tierValue == null) tierValue = new String();
		tierValue += 
		    (tierValue.length() == 0 ? "" : " ") + $val;
		group.setTier("GRASP", String.class, tierValue);
    }
    ;
    
graattrs
    :    GRA_ATTR_TYPE
    {    $gra::type = $GRA_ATTR_TYPE.text;    }
    |    GRA_ATTR_INDEX
    {    $gra::index = $GRA_ATTR_INDEX.text;    }
    |    GRA_ATTR_HEAD
    {    $gra::head = $GRA_ATTR_HEAD.text;    }
    |    GRA_ATTR_RELATION
    {    $gra::relation = $GRA_ATTR_RELATION.text;    }
    ;
    
mw returns [String val]
scope
{
    List<String> mpfxVals;
    List<Tuple<String, String>> mkVals;
}
@init
{
    $mw::mpfxVals = new ArrayList<String>();
    $mw::mkVals = new ArrayList<Tuple<String, String>>();
}
@after {
    // add to compound word if we are inside a <mwc> container
    if($mwc.size() > 0) {
        $mwc::mwVals.add($val);
    }
}
    :   ^(MW_START mpfx* pos stem mk*)
    {
        // simplest case, pos + single choice 
        $val = $pos.val + "|" + $stem.val;
        
        // add mpfx vals if any
        for(String v:$mw::mpfxVals) {
            $val = v + "#" + $val;
        }
        
        // add mk vals if any
        for(Tuple<String, String> v:$mw::mkVals) {
            String suffix = v.getObj1();
            String type = v.getObj2();
            
            String prefix = "";
            if(type.equals("sfx")) {
                prefix = "-";
            } else if(type.equals("sfxf")) {
                prefix = "&";
            } else if(type.equals("mc")) {
                prefix = ":";
            }
            
            $val += prefix + suffix;
        }
    }
    ;
    
mwc returns [String val]
scope
{
    List<String> mwVals;
    List<String> mpfxVals;
    boolean inMwc;
}
@init
{
    $mwc::inMwc = true;
    $mwc::mpfxVals = new ArrayList<String>();
    $mwc::mwVals = new ArrayList<String>();
}
@after
{
    $mwc::inMwc = false;
}
    :    ^(MWC_START mpfx* pos mw+)
    {
        $val = $pos.val + "|";
        for(String v:$mwc::mwVals) {
            $val += "+" + v;
        }
        
        for(String v:$mwc::mpfxVals) {
            $val = v + "#" + $val;
        }
    }
    ;
    
mt returns [String val]
    :    ^(MT_START MT_ATTR_TYPE)
    {
        String t = $MT_ATTR_TYPE.text;
        if(t.equals("p")) {
		   $val = ".";
		} else if(t.equals("q")) {
		    $val = "?";
		} else if(t.equals("e")) {
		    $val = "!";
		} else {
		    // wrap in paren
		    $val = "(mt:" + t + ")";
		}
    }
    ;
    
mpfx returns [String val]
@after {
    if($mw.size() > 0) {
        $mw::mpfxVals.add($val);
    } else if($mwc.size() > 0) {
        $mwc::mpfxVals.add($val);
    }
}
    :    ^(MPFX_START TEXT)
    {
        $val = $TEXT.text;
    }
    ;
   
pos returns [String val]
scope
{
    List<String> sVals;
}
@init
{
    $pos::sVals = new ArrayList<String>();
}
    :    ^(POS_START morposc morposs*)
    {
        $val = $morposc.val;
        for(String s:$pos::sVals) {
            $val += ":" + s;
        }
    }
    ;
    
morposc returns [String val]
    :    ^(C_START TEXT)
    {
        $val = $TEXT.text;
    }
    ;
    
morposs returns [String val]
@after {
    $pos::sVals.add($val);
}
    :    ^(S_START TEXT)
    {
        $val = $TEXT.text;
    }
    ;
    
stem returns [String val]
    :    ^(STEM_START TEXT)
    {
        $val = $TEXT.text;
    }
    ;
    
mk returns [String val, String type]
@after {
    if($mw.size() > 0) {
        $mw::mkVals.add(new Tuple<String, String>($val, $type));
    }
}
    :    ^(MK_START MK_ATTR_TYPE TEXT)
    {
        $val = $TEXT.text;
        $type = $MK_ATTR_TYPE.text;
    }
    ;
]]>
    </buffer>
    
    <buffer name="Phon2XmlWalker.g">
        <![CDATA[
mor
    :    ^(MOR_START (attrlist+=morattr)+ morchoice (list1+=menx)* (list2+=gra)* (list3+=morseq)*)
    ->    template( attrs={$attrlist}, choice={$morchoice.st}, enxlist={$list1},
            gralist={$list2}, seqlist={$list3} )
    "\<mor <attrs>\><choice><if(enxlist)><enxlist><endif><if(gralist)><gralist><endif><if(seqlist)><seqlist><endif>\</mor\>"
    ;
    
morattr
    :    MOR_ATTR_TYPE
    ->    template ( type={$MOR_ATTR_TYPE.text} )
    <<type="<type>" >>
    |    MOR_ATTR_OMITTED
    ->    template ( om={$MOR_ATTR_OMITTED.text} )
    <<omitted="<om>" >>
    ;
    
morchoice
    :    mw
    ->   template( v={$mw.st} )
         "<v>"
    |    mwc
    ->   template( v={$mwc.st} )
         "<v>"
    |    mt
    ->   template( v={$mt.st} )
         "<v>"
    ;
    
morseq
    :    mor_pre
    ->   template( v={$mor_pre.st} )
         "<v>"
    |    mor_post
    ->   template( v={$mor_post.st} )
         "<v>"
    ;
    
mor_pre
    :    ^(MOR_PRE_START morchoice (list1+=menx)* (list2+=gra)*)
    ->   template( choice={$morchoice.st}, enxlist={$list1}, gralist={$list2} )
    "\<mor-pre\><choice><if(enxlist)><enxlist><endif><if(gralist)><gralist><endif>\</mor-pre\>"
    ;
    
mor_post 
    :    ^(MOR_POST_START morchoice (list1+=menx)* (list2+=gra)*)
    ->   template( choice={$morchoice.st}, enxlist={$list1}, gralist={$list2} )
    "\<mor-post\><choice><if(enxlist)><enxlist><endif><if(gralist)><gralist><endif>\</mor-post\>"
    ;
    
menx
    :    ^(MENX_START txt=TEXT)
    ->    template( v={$txt.text} )
    "\<menx\><v>\</menx\>"
    ;

gra
    :    ^(GRA_START (attrlist+=graattrs)+)
    ->    template( attrs={$attrlist} )
    "\<gra <attrs>/\>"
    ;
    
graattrs
    :    GRA_ATTR_TYPE
    ->    template( type={$GRA_ATTR_TYPE.text} )
    <<type="<type>" >>   
    |    GRA_ATTR_INDEX
    ->    template( index={$GRA_ATTR_INDEX.text} )
    <<index="<index>" >>
    |    GRA_ATTR_HEAD
    ->    template( head={$GRA_ATTR_HEAD.text} )
    <<head="<head>" >>
    |    GRA_ATTR_RELATION
    ->    template( rel={$GRA_ATTR_RELATION.text} )
    <<relation="<rel>" >>
    ;
    
mw
    :   ^(MW_START (list1+=mpfx)* pos stem (list2+=mk)*)
    ->    template( mpfxlist={$list1}, mwp={$pos.st}, mws={$stem.st}, mklist={$list2} )
    "\<mw\><if(mpfxlist)><mpfxlist><endif><mwp><mws><if(mklist)><mklist><endif>\</mw\>"
    ;
    
mwc
    :    ^(MWC_START (list1+=mpfx)* pos (list2+=mw)+)
    ->    template( mpfxlist={$list1}, mwcp={$pos.st}, mwlist={$list2} )
    "\<mwc\><if(mpfxlist)><mpfxlist><endif><mwcp><mwlist>\</mwc\>"
    ;
    
mt
    :    ^(MT_START MT_ATTR_TYPE)
    ->    template( type={$MT_ATTR_TYPE.text} )
    "\<mt type=\"<type>\"/\>"
    ;
    
mpfx
    :    ^(MPFX_START TEXT)
    ->    template( v={$TEXT.text} )
    "\<mpfx\><v>\</mpfx\>"
    ;
   
pos 
    :    ^(POS_START morposc (list1+=morposs)*)
    ->    template( posc={$morposc.st}, slist={$list1} )
    "\<pos\><posc><if(slist)><slist><endif>\</pos\>"
    ;
    
morposc
    :    ^(C_START TEXT)
    ->    template( v={$TEXT.text} )
    "\<c\><v>\</c\>"
    ;
    
morposs
    :    ^(S_START TEXT)
    ->    template( v={$TEXT.text} )
    "\<s\><v>\</s\>"
    ;
    
stem
    :    ^(STEM_START TEXT)
    ->    template( v={$TEXT.text} )
    "\<stem\><v>\</stem\>"
    ;
    
mk 
    :    ^(MK_START MK_ATTR_TYPE TEXT)
    ->    template( type={$MK_ATTR_TYPE.text}, v={$TEXT.text} )
    "\<mk type=\"<type>\"\><v>\</mk\>"
    ;
]]>
    </buffer>
    
</chunk>