<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Chat Element
Schema - http://www.talkbank.org/software/talkbank.xsd
XPath - /xs:schema/xs:element[@name="CHAT"]
-->

<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="TalkBank2AST.g">
        <![CDATA[
chat
	:	CHAT_START chat_attrs+ metadata? participants chat_content* CHAT_END 
	->	^(CHAT_START chat_attrs+ metadata? participants chat_content*)
	;
	
chat_content
	:	comment
	|	tcu
	|	begin_gem
	|	end_gem
	|	lazy_gem
	|	u
	;
	
chat_attrs
	:	CHAT_ATTR_VERSION
	|	CHAT_ATTR_DATE
	|	CHAT_ATTR_CORPUS
	|	CHAT_ATTR_VIDEOS
	|	CHAT_ATTR_MEDIA
	|	CHAT_ATTR_MEDIATYPES
	|	CHAT_ATTR_LANG
	|	CHAT_ATTR_OPTIONS
	|	CHAT_ATTR_DESIGNTYPE
	|	CHAT_ATTR_ACTIVITYTYPE
	|	CHAT_ATTR_GROUPTYPE
	|	CHAT_ATTR_COLORWORDS
	|	CHAT_ATTR_PID
	|	CHAT_ATTR_FONT
	;
]]>
    </buffer>
    
    <buffer name="AST2Phon.g">
        <![CDATA[
chat
	:	^(CHAT_START chat_attrs+ participants chat_content*)
	;
	
chat_content
	:	comment
	{
		// add comment to last record
		if(session.getRecordCount() == 0)
			session.getMetadata().addComment($comment.val);
		else
			nextRecordComments.add($comment.val);
	}
	|	u
	{
		session.addRecord($u.record);
	}
	|	lazy_gem
	{
		// add comment to next record
		nextRecordComments.add($lazy_gem.lazyGem);
	}
	|	begin_gem
	{
		nextRecordComments.add($begin_gem.beginGem);
	}
	|	end_gem
	{
		nextRecordComments.add($end_gem.endGem);
	}
	;
	
chat_attrs
	:	CHAT_ATTR_VERSION
	{
		String expectedVersion = "2.16.0";
		String ver = $CHAT_ATTR_VERSION.text;
		// log warning if not version we expect
		if(!ver.equals(expectedVersion)) {
			LOGGER.warning("Excpected version " + expectedVersion + ", got " + ver);
		}
	}
	|	CHAT_ATTR_DATE
	{
		LocalDate date = DateFormatter.stringToDateTime($CHAT_ATTR_DATE.text);
		session.setDate(date);
	}
	|	CHAT_ATTR_CORPUS
	{
		session.setCorpus($CHAT_ATTR_CORPUS.text);
	}
	|	CHAT_ATTR_VIDEOS
	{
		LOGGER.warning("CHAT attribute 'Videos' is currently unsupported");
	}
	|	CHAT_ATTR_MEDIA
	{	
		session.setMediaLocation($CHAT_ATTR_MEDIA.text + 
			(session.getMediaLocation() != null ? session.getMediaLocation() : ""));
	}
	|	CHAT_ATTR_MEDIATYPES
	{
		String suffix = ".wav";  // default media type
		String type = $CHAT_ATTR_MEDIATYPES.text;
		if(type.equals("aif") || type.equals("aiff"))
		{
			suffix = ".aiff";
		} else if(type.equals("mov") || type.equals("video"))
		{
			suffix = ".mov";
		}
		session.setMediaLocation(
			(session.getMediaLocation() != null ? session.getMediaLocation() : "") + suffix);
	}
	|	CHAT_ATTR_LANG
	{
		session.setLanguage($CHAT_ATTR_LANG.text);
		
		// attempt to load appropriate syllabifier
		try {
			Language syllabifierLang = Language.parseLanguage($CHAT_ATTR_LANG.text.split("\\p{Space}")[0]);
			SyllabifierLibrary library = SyllabifierLibrary.getInstance();
			Syllabifier syllabifier = library.getSyllabifierForLanguage(syllabifierLang);
			if(syllabifier != null) {
				setSyllabifier(syllabifier);
			}
		} catch (IllegalArgumentException e) {
			LOGGER.log(Level.WARNING, e.getLocalizedMessage(), e);
		}
	}
	|	CHAT_ATTR_OPTIONS
	{
		LOGGER.warning("CHAT attribute 'Options' is currently unsupported");
	}
	|	CHAT_ATTR_DESIGNTYPE
	{
		LOGGER.warning("CHAT attribute 'DesignType' is currently unsupported");
	}
	|	CHAT_ATTR_ACTIVITYTYPE
	{
		LOGGER.warning("CHAT attribute 'ActivityType' is currently unsupported");
	}
	|	CHAT_ATTR_GROUPTYPE
	{
		LOGGER.warning("CHAT attribute 'GroupType' is currently unsupported");
	}
	|	CHAT_ATTR_COLORWORDS
	{
		LOGGER.warning("CHAT attribute 'Colorwords' is currently unsupported");
	}
	|	CHAT_ATTR_WINDOW
	{
		LOGGER.warning("CHAT attribute 'Window' is currently unsupported");
	}
	|	CHAT_ATTR_PID
	{
		Comment comment = sessionFactory.createComment();
		comment.setType(CommentEnum.Code);
		comment.setValue("pid " + $CHAT_ATTR_PID.text);
		session.getMetadata().addComment(comment);
	}
	|	CHAT_ATTR_FONT
	{
		LOGGER.warning("CHAT attribute 'Font' is currently unsupported");
	}
	;
]]>
    </buffer>
	
	<buffer name="AST2TalkBank.g">
		<![CDATA[
chat
	:	^(CHAT_START (attrlist+=chat_attrs)+ (meta=metadata)? (partlist=participants) (contentlist+=chat_content)*)
	->	template(
			attrs={$attrlist},
			md={$meta.st},
			parts={$partlist.st},
			content={$contentlist}
		)
	<<\<?xml version="1.0" encoding="UTF-8"?\>
\<CHAT 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns="http://www.talkbank.org/ns/talkbank"  
	xsi:schemaLocation="http://www.talkbank.org/ns/talkbank http://talkbank.org/software/talkbank.xsd" 
	<attrs; separator=""> \>
	<if(md)><md><endif>
	<parts>
	<content; separator="">
\</CHAT\> >>
	;

chat_content
	:	comment
	->	template( v={$comment.st} )
		"<v>"
	|	u
	->	template( v={$u.st} )
		"<v>"
	|	lazy_gem
	->	template( v={$lazy_gem.st} )
		"<v>"
	|	begin_gem
	->	template( v={$begin_gem.st} )
		"<v>"
	|	end_gem
	->	template( v={$end_gem.st} )
		"<v>"
	|	tcu
	->	template( v={$tcu.st} )
		"<v>"
	;
	
chat_attrs
	:	CHAT_ATTR_VERSION
	->	template(version={$CHAT_ATTR_VERSION.text})
	<<
Version="<version>" >>
	|	CHAT_ATTR_DATE
	->	template(date={$CHAT_ATTR_DATE.text})
	<<
Date="<date>" >>
	|	CHAT_ATTR_CORPUS
	->	template(corpus={$CHAT_ATTR_CORPUS.text})
	<<
Corpus="<corpus>" >>
	|	CHAT_ATTR_VIDEOS
	->	template(videos={$CHAT_ATTR_VIDEOS.text})
	<<
Videos="<videos>" >>
	|	CHAT_ATTR_MEDIA
	->	template(media={$CHAT_ATTR_MEDIA.text})
	<<
Media="<media>" >>
	|	CHAT_ATTR_MEDIATYPES
	->	template(types={$CHAT_ATTR_MEDIATYPES.text})
	<<
Mediatypes="<types>" >>
	|	CHAT_ATTR_LANG
	->	template(lang={$CHAT_ATTR_LANG.text})
	<<
Lang="<lang>" >>
	|	CHAT_ATTR_OPTIONS
	->	template(opts={$CHAT_ATTR_OPTIONS.text})
	<<
Options="<opts>" >>
	|	CHAT_ATTR_DESIGNTYPE
	->	template(type={$CHAT_ATTR_DESIGNTYPE.text})
	<<
DesignType="<type>" >>
	|	CHAT_ATTR_ACTIVITYTYPE
	->	template(type={$CHAT_ATTR_ACTIVITYTYPE.text})
	<<
ActivityType="<type>" >>
	|	CHAT_ATTR_GROUPTYPE
	->	template(type={$CHAT_ATTR_GROUPTYPE.text})
	<<
GroupType="<type>" >>
	|	CHAT_ATTR_COLORWORDS
	->	template(wrds={$CHAT_ATTR_COLORWORDS.text})
	<<
Colorwords="<wrds>" >>
	|	CHAT_ATTR_WINDOW
	->	template(window={$CHAT_ATTR_WINDOW.text})
	<<
Window="<window>" >>
	|	CHAT_ATTR_ID
	->	template(id={$CHAT_ATTR_ID.text})
	<<
Id="<id>" >>
	|	CHAT_ATTR_PID
	->	template(pid={$CHAT_ATTR_PID.text})
	<<
PID="<pid>" >>
	|	CHAT_ATTR_FONT
	->	template(font={$CHAT_ATTR_FONT.text})
	<<
Font="<font>" >>
	;
	
]]>
	</buffer>
    
    <include>participants.xml</include>
    <include>comment.xml</include>
	<include>begin_gem.xml</include>
	<include>end_gem.xml</include>
	<include>lazy_gem.xml</include>
    <include>u.xml</include>

</chunk>
