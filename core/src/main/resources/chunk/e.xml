<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Event
XPath -	/xs:schema/xs:complexType[@name="eventType"]
-->
<chunk xmlns="http://phon.ling.mun.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="Chat.g">
        <![CDATA[
e
	:	E_START echoice1 echoice2* E_END 
	->	^(E_START echoice1 echoice2*)
	;
	
echoice1
	:	action
	|	happening
	|	otherspokenevent
	;

echoice2
	:	k
	|	error
	|	r
	|	overlap
	|	ga
	|	duration
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="ChatTree.g">
        <![CDATA[
e returns [String val]
scope {
	String buffer;
}
@init {
	$e::buffer = new String();
}
@after {
	$val = "*" + $e::buffer + "*";
}
	:	^(E_START echoice1 echoice2*)
	;
	

echoice1
	:	action
	{
		$e::buffer += ($e::buffer.length() > 0 ? " " : "") + "(action:";
		
		if($action.val != null)
		{
			$e::buffer += $action.val;
		}
		$e::buffer += ")";
	}
	|	happening
	{
		// default event option, no parenthesis needed
		$e::buffer += ($e::buffer.length() > 0 ? " " : "");
		if($happening.val != null)
		{
			$e::buffer += $happening.val;
		}
	}
	|	otherspokenevent
	{
		$e::buffer += ($e::buffer.length() > 0 ? " " : "");
		if($otherspokenevent.val != null) {
			$e::buffer += $otherspokenevent.val;
		}
	}
	;

echoice2
	:	k
	{
		if($k.val != null) {
			$e::buffer += ($e::buffer.length() > 0 ? " " : "") +
				$k.val;
		}
	}
	|	error
	{
		if($error.val != null) {
			$e::buffer += ($e::buffer.length() > 0 ? " " : "") +
					$error.val;
		}
	}
	|	r
	{
		if($r.val != null) {
			$e::buffer += ($e::buffer.length() > 0 ? " " : "") +
					"(x" + $r.val + ")";
		}
	}
	|	overlap
	{
		$e::buffer += ($e::buffer.length() > 0 ? " " : "") +
				"(";
		if($overlap.val != null) {
			 $e::buffer += $overlap.val;	
		}
		$e::buffer += ")";
	}
	|	ga
	{
		if($ga.val != null)
		{
			$e::buffer += ($e::buffer.length() > 0 ? " " : "") +
				$ga.val;
		}
	}
	|	duration
	;
]]>
    </buffer>
	
	<buffer name="Phon2XmlWalker.g">
		<![CDATA[
e
	:	^(E_START req=echoice1 (contentlist+=echoice2)*)
	->	template( required={$req.st}, econtent={$contentlist} )
	<<\<e\><required><if(econtent)><econtent; separator=""><endif>\</e\> >>
	;

echoice1
	:	action
	->	template( v={$action.st} )
		"<v>"
	|	happening
	->	template( v={$happening.st} )
		"<v>"
	|	otherspokenevent
	->	template( v={$otherspokenevent.st} )
		"<v>"
	;

echoice2
	:	k
	->	template( v={$k.st} )
		"<v>"
	|	error
	->	template( v={$error.st} )
		"<v>"
	|	r
	->	template( v={$r.st} )
		"<v>"
	|	overlap
	->	template( v={$overlap.st} )
		"<v>"
	|	ga
	->	template( v={$ga.st} )
		"<v>"
	|	duration
	->	template( v={$duration.st} )
		"<v>"
	;
]]>
	</buffer>
    
    <!-- Includes -->
	<include>action.xml</include>
	<include>happening.xml</include>
	<include>ga.xml</include>
	<include>overlap.xml</include>
	<include>otherspokenevent.xml</include>
	<include>k.xml</include>
	<include>error.xml</include>
	<include>duration.xml</include>
    
</chunk>
