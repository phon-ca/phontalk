<?xml version="1.0" encoding="UTF-8"?>

<!--
Phonetic Transcript
XPath - /xs:schema/xs:complexType[@name="phoType"] 
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="TalkBank2AST.g">
        <![CDATA[
pho
	:	model
	|	actual
	;

model
	:	MODEL_START pw* MODEL_END
	->	^(MODEL_START  pw*)
	;

actual
	:	ACTUAL_START pw* ACTUAL_END
	->	^(ACTUAL_START pw*)
	;

pw
	:	PW_START pwele* PW_END
	->	^(PW_START pwele*)
	;
	
pwele
	:	ss
	|	wk
	|	ph
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="AST2Phon.g">
        <![CDATA[
pho returns [IPATranscript ipa]
scope
{
	StringBuffer buffer;
}
@init
{
	$pho::buffer = new StringBuffer();
}
	:	model
	{
		$pho.ipa = ($pho::buffer.length() > 0 
					?	(new IPATranscriptBuilder()).append($pho::buffer.toString()).toIPATranscript()
					:	new IPATranscript());
		if(!isProcessFragments()) {
			if($g.size() == 0) {
				$ugrp::g.setIPATarget($pho.ipa);
			} else {
				$g::tReps.put($g::pgCount-1, $pho.ipa);
			}
		}
	}
	|	actual
	{
		$pho.ipa = ($pho::buffer.length() > 0
					?	(new IPATranscriptBuilder()).append($pho::buffer.toString()).toIPATranscript()
					:	new IPATranscript());
		if(!isProcessFragments()) {
			if($g.size() == 0) {
				$ugrp::g.setIPAActual($pho.ipa);
			} else {
				$g::aReps.put($g::pgCount-1, $pho.ipa);
			}
		}
	}
	;

model
	:	^(MODEL_START  pw*)
	;

actual
	:	^(ACTUAL_START pw*)
	;

pw
scope {
	SyllableConstituentType lastType;
}
@init {
	if($pho::buffer.length() > 0) {
		$pho::buffer.append(" ");
	}
	$pw::lastType = SyllableConstituentType.UNKNOWN;
}
	:	^(PW_START pwele*)
	;

pwele
	:	ss
	{
		$pho::buffer.append($ss.val);
	}
	|	wk
	{
		$pho::buffer.append($wk.val);
	}
	|	ph
	{
		if($ph.val != null) {
			$pho::buffer.append($ph.val);
			if($ph.type != null && $ph.type != SyllableConstituentType.UNKNOWN) {
				
				if($pw::lastType == SyllableConstituentType.NUCLEUS &&
					$ph.type == SyllableConstituentType.NUCLEUS && !$ph.hiatus) {
					
					$pho::buffer.replace($pho::buffer.length() - $ph.val.length() - 1,
						$pho::buffer.length(), "D" + $ph.val);
					$pho::buffer.append(':').append("D");
				} else {
					$pho::buffer.append(':').append($ph.type.getMnemonic());
				}
				$pw::lastType = $ph.type;
			}
		}
	}
	;
]]>
    </buffer>
	
	<buffer name="AST2TalkBank.g">
		<![CDATA[
pho
	:	model
	->	template( v = {$model.st} )
	"<v>"
	|	actual
	->	template( v = {$actual.st} )
	"<v>"
	;

model
	:	^(MODEL_START  (pws+=pw)*)
	->	template( content={$pws} )
	<<\<model\>
	<content; separator="\n">
\</model\> >>
	;

actual
	:	^(ACTUAL_START (pws+=pw)*)
	->	template( content={$pws} )
	<<\<actual\>
	<content; separator="\n">
\</actual\> >>
	;

pw
	:	^(PW_START (pweles+=pwele)*)
	->	template( content={$pweles} )
	<<\<pw\>
	<content; separator="\n">
\</pw\> >>
	;

pwele
	:	ss
	->	template( v = {$ss.st} )
	"<v>"
	|	wk
	->	template( v = {$wk.st} )
	"<v>"
	|	ph
	->	template(v = {$ph.st} )
	"<v>"
	;
]]>
	</buffer>

	<include>ph.xml</include>
	<include>wk.xml</include>
	<include>ss.xml</include>
    
</chunk>
