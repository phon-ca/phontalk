<?xml version="1.0" encoding="UTF-8"?>

<!--
Phonetic Transcript
XPath - /xs:schema/xs:complexType[@name="phoType"] 
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="Chat.g">
        <![CDATA[
pho
	:	model
	|	actual
	;

model
	:	MODEL_START pw* MODEL_END
	->	^(MODEL_START  pw*)
	;

actual
	:	ACTUAL_START pw* ACTUAL_END
	->	^(ACTUAL_START pw*)
	;

pw
	:	PW_START pwele* PW_END
	->	^(PW_START pwele*)
	;
	
pwele
	:	ss
	|	wk
	|	ph
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="ChatTree.g">
        <![CDATA[
pho returns [IPATranscript ipa]
scope
{
	IPATranscriptBuilder builder;
}
@init
{
	$pho::builder = new IPATranscriptBuilder();
}
@after {
	$pho.ipa = $pho::builder.toIPATranscript();
}
	:	model
	{
		IPATranscript transcript = $pho::builder.toIPATranscript();
		if($g.size() == 0) {
			$ugrp::g.setIPATarget(transcript);
		} else {
			$g::tReps.put($g::pgCount-1, transcript);
		}
	}
	|	actual
	{
		IPATranscript transcript = $pho::builder.toIPATranscript();
		if($g.size() == 0) {
			$ugrp::g.setIPAActual(transcript);
		} else {
			$g::aReps.put($g::pgCount-1, transcript);
		}
	}
	;

model
	:	^(MODEL_START  pw*)
	;

actual
	:	^(ACTUAL_START pw*)
	;

pw
@init {
	if($pho::builder.size() > 0) {
		$pho::builder.appendWordBoundary();
	}
}
	:	^(PW_START pwele*)
	;

pwele
	:	ss
	{
		$pho::builder.append($ss.val);
	}
	|	wk
	{
		$pho::builder.append($wk.val);
	}
	|	ph
	{
		$pho::builder.append($ph.val);
	}
	;
]]>
    </buffer>
	
	<buffer name="Phon2XmlWalker.g">
		<![CDATA[
pho
	:	model
	->	template( v = {$model.st} )
	"<v>"
	|	actual
	->	template( v = {$actual.st} )
	"<v>"
	;

model
	:	^(MODEL_START  (pws+=pw)*)
	->	template( content={$pws} )
	<<\<model\>
	<content; separator="\n">
\</model\> >>
	;

actual
	:	^(ACTUAL_START (pws+=pw)*)
	->	template( content={$pws} )
	<<\<actual\>
	<content; separator="\n">
\</actual\> >>
	;

pw
	:	^(PW_START (pweles+=pwele)*)
	->	template( content={$pweles} )
	<<\<pw\>
	<content; separator="\n">
\</pw\> >>
	;

pwele
	:	ss
	->	template( v = {$ss.st} )
	"<v>"
	|	wk
	->	template( v = {$wk.st} )
	"<v>"
	|	ph
	->	template(v = {$ph.st} )
	"<v>"
	;
]]>
	</buffer>

	<include>ph.xml</include>
	<include>wk.xml</include>
	<include>ss.xml</include>
    
</chunk>
