<?xml version="1.0" encoding="UTF-8"?>

<!-- 
Word
XPath - /xs:schema/xs:complexType[@name="wordType"]
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="TalkBank2AST.g">
        <![CDATA[
w
	:	W_START wattr* langs? wele* W_END 
	->	^(W_START wattr* langs? wele*)
	;
	
wele
	:	TEXT 
	|	overlap_point
	|	underline
	|	italic
	|	shortening
	|	p
	|	long_feature
	|	wk 
	|	pos
	|	replacement
	|	mor
	|	mk
	;
	
wattr
	:	W_ATTR_SEPARATED_PREFIX
	|	W_ATTR_USER_SPECIAL_FORM
	|	W_ATTR_FORMSUFFIX
	|	W_ATTR_FORMTYPE
	|	W_ATTR_TYPE
	|	W_ATTR_UNTRANSCRIBED
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="AST2Phon.g">
        <![CDATA[
w returns [String val]
scope {
	String word;
	String elements;
	String suffix;
	String prefix;
}
@init {
	$w::word = new String();
	$w::elements = new String();
	$w::suffix = "";
	$w::prefix = "";
}
@after {
	$val = $w::prefix + $w::word + $w::suffix + ($w::elements.length() > 0 ? " " + $w::elements : "");
}
	:	^(W_START wattr* ls=langs? wele*)
	{
		if($ls.val != null) {
			$w::word = $ls.val + $w::word;
		}
	}
	;
	
wele
	:	TEXT
	{	
		$w::word += ($w::word.length() > 0 ? "" : "") + $TEXT.text;	
	}
	|	overlap_point
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") + $overlap_point.val;
	}
	|	underline
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") + $underline.val;
	}
	|	italic
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") + $italic.val;
	}
	|	shortening
	{
		$w::word += $shortening.val;
	}
	|	p 
	{
		$w::word += $p.val;
	}
	|	long_feature
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") + $long_feature.val;
	}
	| 	wk
	{
		$w::word += $wk.val;
	}
	|	pos
	|	replacement
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") + $replacement.val;
	}
	|	mor
	{
		// mor is handled as a seperate dependent tier
		String morVal = $mor.val;
		String tierName = $mor.tierName;
		
		if($g.size() > 0) {
			// add to group data
			Map<Integer, String> trMap = $g::trMaps.get(tierName);
			if(trMap == null) {
				trMap = new LinkedHashMap<>();
				$g::trMaps.put(tierName, trMap);
			}
			String val = (trMap.containsKey($g::pgCount) ? trMap.get($g::pgCount) : "");
			val += (val.length() > 0 ? " " : "") + morVal;
			trMap.put($g::pgCount, val);
		} else {
			// make sure dep tier exists in session
			TierDescription tierDesc = ensureTierExists(tierName, true); 
			
			Tier<String> morTier = $u::r.getTier(tierName, String.class);
			if(morTier == null) {
				morTier = sessionFactory.createTier(tierName, String.class, true);
				for(int i = 0; i < $u::r.numberOfGroups(); i++) morTier.addGroup();
				$u::r.putTier(morTier);
			}
			
			// add mor data as a dep tier of the current group
			Group group = null;
			// get the correct word group holder
			if($t.size() > 0 || $ugrp.size() > 0) {
			    group = ($t.size() > 0 ? $t::g : $ugrp::g);
			} else if($u.size() > 0) {
			    group = $u::r.getGroup($u::r.numberOfGroups()-1);
			}
			
			String tierValue = 
				(group.getTier(tierName) != null ? group.getTier(tierName, String.class) : "");
			tierValue += 
			    (tierValue.length() == 0 ? "" : " ") + morVal;
			group.setTier(tierName, String.class, tierValue);
		}
	}
	|	mk
	{
		$w::elements += ($w::elements.length() > 0 ? " " : "") 
			+ "(mk," + $mk.type + ":" + $mk.val + ")";
	}
	;
	
wattr
	:	W_ATTR_SEPARATED_PREFIX
	{
		// word#
		if(Boolean.parseBoolean($W_ATTR_SEPARATED_PREFIX.text))
			$w::suffix = "#";
	}
	|	W_ATTR_USER_SPECIAL_FORM
	{
		$w::suffix = "@z:" + $W_ATTR_USER_SPECIAL_FORM.text;
	}
	|	W_ATTR_FORMSUFFIX
	{
		$w::suffix += "-" + $W_ATTR_FORMSUFFIX.text;
	}
	|	W_ATTR_FORMTYPE
	{
		$w::suffix = "@";
		
		String t = $W_ATTR_FORMTYPE.text;
		if(t.equals("addition")) {
			$w::suffix += "a";
		} else if(t.equals("babbling")) {
			$w::suffix += "b";
		} else if(t.equals("child-invented")) {
			$w::suffix += "c";
		} else if(t.equals("dialect")) {
			$w::suffix += "d";
		} else if(t.equals("family-specific")) {
			$w::suffix += "f";
		} else if(t.equals("filled pause")) {
			$w::suffix += "fp";
		} else if(t.equals("filler syllable")) {
			$w::suffix += "fs";
		} else if(t.equals("generic")) {
			$w::suffix += "g";
		} else if(t.equals("interjection")) {
			$w::suffix += "i";
		} else if(t.equals("kana")) {
			$w::suffix += "k";
		} else if(t.equals("letter")) {
			$w::suffix += "l";
		} else if(t.equals("neologism")) {
			$w::suffix += "n";
		} else if(t.equals("no voice")) {
			$w::suffix += "nv";
		} else if(t.equals("onomatopoeia")) {
			$w::suffix += "o";
		} else if(t.equals("phonology consistent")) {
			$w::suffix += "p";
		} else if(t.equals("proto-morpheme")) {
			$w::suffix += "pm";
		} else if(t.equals("quoted metareference")) {
			$w::suffix += "q";
		} else if(t.equals("sign speech")) {
			$w::suffix += "sas";
		} else if(t.equals("singing")) {
			$w::suffix += "si";
		} else if(t.equals("signed language")) {
			$w::suffix += "sl";
		} else if(t.equals("test")) {
			$w::suffix += "t";
		} else if(t.equals("UNIBET")) {
			$w::suffix += "u";
		} else if(t.equals("words to be excluded")) {
			$w::suffix += "x";
		} else if(t.equals("word play")) {
			$w::suffix += "wp";
		}
	}
	|	W_ATTR_TYPE
	{
		String t = $W_ATTR_TYPE.text;
		if(t.equals("omission")) { 
			$w::prefix = "0";
		} else if(t.equals("fragment")) {
			$w::prefix = "&";
		}
	}
	|	W_ATTR_UNTRANSCRIBED
	;
]]>
    </buffer>
	
	<buffer name="AST2TalkBank.g">
		<![CDATA[
w
	:	^(W_START (wattrlist+=wattr)* langs? (contentlist+=wele)* )
	->	template( content={$contentlist}, l={$langs.st}, wattrs={$wattrlist} )
		"\<w<if(wattrs)> <wattrs; separator=\"\"><endif><if(content)>\><else>/\><endif><if(l)><l><endif><if(content)><content; separator=\"\">\</w\><endif>"
	;
	
wele
	:	TEXT
	->	template( v={$TEXT.text} )
		"<v>"
	|	overlap_point
	->	template( v={$overlap_point.st.toString()} )
		"<v>"
	|	underline
	->	template( v={$underline.st.toString()} )
		"<v>"
	|	italic
	->	template( v={$italic.st.toString()} )
		"<v>"
	|	shortening
	->	template( v={$shortening.st.toString()} )
		"<v>"
	|	p
	->	template( v={$p.st.toString()} )
		"<v>"
	|	long_feature
	->	template( v={$long_feature.st.toString()} )
		"<v>"
	|	wk
	->	template( v={$wk.st.toString()} )
		"<v>"
	|	pos
	->	template( v={$pos.st.toString()} )
		"<v>"
	|	replacement
	->	template( v={$replacement.st.toString()} )
		"<v>"
	|	mor
	->	template( v={$mor.st} )
		"<v>"
	|	mk
	->	template( v={$mk.st} )
		"<v>"
	;
	
wattr
	:	W_ATTR_SEPARATED_PREFIX
	->	template( v={$W_ATTR_SEPARATED_PREFIX.text} )
	<<separated-prefix="<v>" >>
	|	W_ATTR_FORMTYPE
	->	template( v={$W_ATTR_FORMTYPE.text} )
	<<formType="<v>" >>
	|	W_ATTR_TYPE
	->	template( v={$W_ATTR_TYPE.text} )
	<<type="<v>" >>
	|	W_ATTR_USER_SPECIAL_FORM
	->	template( v={$W_ATTR_USER_SPECIAL_FORM.text} )
	<<user-special-form="<v>" >>
	|	W_ATTR_FORMSUFFIX
	->	template( v={$W_ATTR_FORMSUFFIX.text} )
	<<form-suffix="<v>" >>
	|	W_ATTR_UNTRANSCRIBED
	->	template( v={$W_ATTR_UNTRANSCRIBED.text} )
	<<untranscribed="<v>" >>
	;
]]>
	</buffer>
	
    <!-- Includes -->
	<include>langs.xml</include>
    <include>overlappoint.xml</include>
    <include>underline.xml</include>
	<include>italic.xml</include>
	<include>shortening.xml</include>
	<include>p.xml</include>
	<include>longfeature.xml</include>
	<include>wk.xml</include>
	<include>replacement.xml</include>
	<include>mor.xml</include>
	
</chunk>
