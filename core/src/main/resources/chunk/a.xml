<?xml version="1.0" encoding="UTF-8"?>

<!--
Annotation
XPath - /xs:schema/xs:complexType[@name="annotationType"] 
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="TalkBank2AST.g">
        <![CDATA[
a
	:	A_START a_attr* (aele)* A_END 
	->	^(A_START a_attr* aele*)
	;

aele
	:	TEXT
	|	media
	;
	
a_attr
	:	A_ATTR_TYPE
	|	A_ATTR_FLAVOR
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="AST2Phon.g">
        <![CDATA[
a returns [String type, String flavor, String val]
scope {
	String t;
	String f;
	String buffer;
}
@init {
	$a::t = new String();
	$a::f = new String();
	$a::buffer = new String();
}
@after {
	$type = $a::t;
	$flavor = $a::f;
	$val = $a::buffer;
}
	:	^(A_START a_attr* eles+=aele*)
	{
		String tierVal = $a::buffer.trim();
		// special tiers
		if(	$a::t.equals("addressee") 
			|| $a::t.equals("actions") 
			|| $a::t.equals("situation")
			|| $a::t.equals("intonation")
			|| $a::t.equals("explanation")
			|| $a::t.equals("alternative")
			|| $a::t.equals("coding") 
			|| $a::t.equals("cohesion")
			|| $a::t.equals("english translation")
			|| $a::t.equals("errcoding")
			|| $a::t.equals("flow")
			|| $a::t.equals("facial")
			|| $a::t.equals("target gloss")
			|| $a::t.equals("gesture")
			|| $a::t.equals("language")
			|| $a::t.equals("orthography")
			|| $a::t.equals("ort")
			|| $a::t.equals("paralinguistics")
			|| $a::t.equals("SALT")
			|| $a::t.equals("speech act")
			|| $a::t.equals("time stamp") )
		{
			String tierName = $a::t;
			if(tierName.equals("orthography")) tierName = "ort"; // change tier name for orthpgraphy to avoid collisions
			
			TierDescription tierDesc = ensureTierExists(tierName, false);
			Tier<String> userTier = $u::r.getTier(tierName, String.class);
			if(userTier == null) {
				userTier = sessionFactory.createTier(tierName, String.class, false);
				$u::r.putTier(userTier);
			}
			userTier.setGroup(0, tierVal);
		}
		
		// set notes if type is 'comments'
		else if($a::t.equals("comments")) 
		{
			// set notes in utterance
			$u::r.getNotes().setGroup(0, tierVal);
		}
		
		// if type is 'extension' create a new dep tier (if necessary)
		// and then add the data to the utterance
		else if($a::t.equals("extension"))
		{
			String tierName = $a::f;
			
			boolean isGrouped =
			 	(tierVal.startsWith("[") && tierVal.endsWith("]"));
			TierDescription tierDesc = ensureTierExists(tierName, isGrouped);
			
			Tier<String> depTier = $u::r.getTier(tierName, String.class);
			if(depTier == null) {
				depTier = sessionFactory.createTier(tierName, String.class, isGrouped);
				$u::r.putTier(depTier);
			}
			
			if(isGrouped) {
				final Pattern pattern = Pattern.compile("\\[(.*?)\\]");
				final Matcher matcher = pattern.matcher(tierVal);
				int numDepGroups = 0;
				while(matcher.find()) {
					final String grpVal = matcher.group(1).trim();
					depTier.addGroup(grpVal);
					++numDepGroups;
				}
				
				if(numDepGroups > $u::r.getOrthography().numberOfGroups()) {
					final PhonTalkMessage msg = new PhonTalkMessage(
						"Record #" + (session.getRecordCount()+1) + ". Tier " + tierName + " has more groups than Orthography.",
						PhonTalkMessage.Severity.WARNING);
					msg.setFile(new java.io.File(this.getFile()));
					if(getPhonTalkListener() != null)
						getPhonTalkListener().message(msg);
				}
			} else {
				depTier.setGroup(0, tierVal);
			}
		}
		
		// if type is 'phonetic' we have an old-style pho (instead)
		// of npho) try to import the data as an IPA transcript
		else if($a::t.equals("phonetic"))
		{
			String[] splitVals = $a::buffer.split("\\p{Space}");
			
			if(splitVals.length != $u::r.numberOfGroups()) {
				LOGGER.warning("[Record " + (recordIndex+1) + "] Misaligned \%xpho '" + $a::buffer + "'");
			}
			
			Tier<IPATranscript> ipaA = $u::r.getIPAActual();
			int sIdx = 0;
			for(int gIdx = 0; gIdx < $u::r.numberOfGroups() && sIdx < splitVals.length; gIdx++) {
				String v = splitVals[sIdx++].trim();
				
				IPATranscriptBuilder builder = new IPATranscriptBuilder();
				builder.append(v);
				ipaA.setGroup(gIdx, builder.toIPATranscript());
			}
			
			if(sIdx < splitVals.length) {
				IPATranscriptBuilder builder = new IPATranscriptBuilder();
				builder.append(ipaA.getGroup(ipaA.numberOfGroups()-1)).appendWordBoundary().append(splitVals[sIdx]);
				ipaA.setGroup(ipaA.numberOfGroups()-1, builder.toIPATranscript());
			}
		}
	}
	;
	
aele
	:	TEXT
	{
		$a::buffer += $TEXT.text;
	}
	|	media
	{
		MediaSegment m = $media.val;
		if(m != null) {
			String addVal = "(" + 
				MsFormatter.msToDisplayString((long)Math.round(m.getStartValue())) + "-" +
				MsFormatter.msToDisplayString((long)Math.round(m.getEndValue())) + ")";
			$a::buffer += ($a::buffer.length() > 0 ? " " : "") +
				addVal;
		}
	}
	;

a_attr
	:	A_ATTR_TYPE
	{
		$a::t = $A_ATTR_TYPE.text;
	}
	|	A_ATTR_FLAVOR
	{ 
		$a::f = $A_ATTR_FLAVOR.text;
	}
	;
]]>
    </buffer>
	
	<buffer name="AST2TalkBank.g">
		<![CDATA[
a
	:	^(A_START (attrlist+=a_attr)* (contentlist+=aele)*)
	->	template(
			attrs={$attrlist},
			content={$contentlist}
		)
	<<\<a <attrs; separator=" ">\>\<![CDATA[<content; separator="">]]\>\</a\> >>
	;

aele
	:	TEXT
	->	template( v={$TEXT.text} )
		"<v>"
	|	media
	->	template( v={$media.st} )
		"<v>"
	;
	
a_attr
	:	A_ATTR_TYPE
	->	template( v={$A_ATTR_TYPE} )
	<<type="<v>">>
	|	A_ATTR_FLAVOR
	->	template( v={$A_ATTR_FLAVOR} )
	<<flavor="<v>">>
	;
]]>
	</buffer>

	<include>media.xml</include>

</chunk>
