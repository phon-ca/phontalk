<?xml version="1.0" encoding="UTF-8"?>

<!-- 
-->
<chunk xmlns="https://www.phon.ca/ns/chunk">
    
    <!-- Parser -->
    <buffer name="Chat.g">
        <![CDATA[
align
	:	ALIGN_START alignCol* ALIGN_END
	->	^(ALIGN_START alignCol*)
	;

alignCol
	:	COL_START phref+ COL_END
	->	^(COL_START phref+)
	;

phref
	:	modelref
	|	actualref
	;

modelref
	:	MODELREF_START TEXT MODELREF_END
	->	^(MODELREF_START TEXT)
	;

actualref
	:	ACTUALREF_START TEXT ACTUALREF_END
	->	^(ACTUALREF_START TEXT)
	;
]]>
    </buffer>
    
    <!-- Tree Walker -->
    <buffer name="ChatTree.g">
        <![CDATA[
align
scope {
	List<Integer> topAlign;
	List<Integer> btmAlign;
}
@init {
	$align::topAlign = new ArrayList<Integer>();
	$align::btmAlign = new ArrayList<Integer>();
}
	:	^(ALIGN_START alignCol*)
	{
		IPhoneticRep tRep =
			$ugrp::w.getPhoneticRepresentation(Form.Target);
		IPhoneticRep aRep =
			$ugrp::w.getPhoneticRepresentation(Form.Actual);

		if(tRep != null && aRep != null) {
			PhoneMap pm = new PhoneMap(tRep, aRep);
			pm.setTopAlignment($align::topAlign.toArray(new Integer[0]));
			pm.setBottomAlignment($align::btmAlign.toArray(new Integer[0]));

			$ugrp::w.setPhoneAlignment(pm);
		}
	}
	;

alignCol
scope {
	boolean hasModel;
	boolean hasActual;
}
@init {
	$alignCol::hasModel = false;
	$alignCol::hasActual = false;
}
	:	^(COL_START phref+)
	{
		if($alignCol::hasModel) {
			int pIdx = 0;
			for(Integer aIdx:$align::topAlign) {
				if(aIdx >= 0)
					pIdx++;
			}
			$align::topAlign.add(pIdx);
		} else {
			$align::topAlign.add(-1);
		}

		if($alignCol::hasActual) {
			int pIdx = 0;
			for(Integer aIdx:$align::btmAlign) {
				if(aIdx >= 0)
					pIdx++;
			}
			$align::btmAlign.add(pIdx);
		} else {
			$align::btmAlign.add(-1);
		}
	}
	;

phref
	:	modelref
	{
		$alignCol::hasModel = true;
	}
	|	actualref
	{
		$alignCol::hasActual = true;
	}
	;

modelref
	:	^(MODELREF_START TEXT)
	;

actualref
	:	^(ACTUALREF_START TEXT)
	;
]]>
    </buffer>
    
    <buffer name="Phon2XmlWalker.g">
        <![CDATA[
align
	:	^(ALIGN_START (cols+=alignCol)*)
	->	template( columns = {$cols} )
	<<\<align\>
	<columns; separator="\n">
\</align\> >>
	;

alignCol
	:	^(COL_START (phs+=phref)+)
	->	template( phrefs = {$phs} )
	<<\<col\><phrefs; separator=" ">\</col\> >>
	;

phref
	:	modelref
	->	template( v = {$modelref.st} )
	"<v>"
	|	actualref
	->	template( v = {$actualref.st} )
	"<v>"
	;

modelref
	:	^(MODELREF_START TEXT)
	->	template( v = {$TEXT.text} )
	<<\<modelref\><v>\</modelref\> >>
	;

actualref
	:	^(ACTUALREF_START TEXT)
	->	template( v = {$TEXT.text} )
	<<\<actualref\><v>\</actualref\> >>
	;
]]>
    </buffer>
    
</chunk>