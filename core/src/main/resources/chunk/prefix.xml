<?xml version="1.0" encoding="UTF-8"?>

<chunk xmlns="https://www.phon.ca/ns/chunk">

    <buffer name="Chat.g">
        <![CDATA[
grammar Chat;

options {
	output=AST;
	ASTLabelType=CommonTree;
	superClass=PhonTalkParser;
}

@header {
package ca.phon.phontalk.parser;

import java.util.logging.*;

}

@members {
private final static Logger LOGGER = Logger.getLogger("ca.phon.phontalk.parser");
}
]]>
    </buffer>

    <buffer name="ChatTree.g">
        <![CDATA[
tree grammar ChatTree;

options
{
	ASTLabelType = CommonTree ;
	tokenVocab = Chat ;
	output = AST;
	superClass=PhonTalkTreeParser;
}

@header {
package ca.phon.phontalk.parser;

import ca.phon.phontalk.*;
import ca.phon.phontalk.parser.*;

import ca.phon.util.*;
import ca.phon.ipa.*;
import ca.phon.ipa.alignment.*;
import ca.phon.syllable.*;
import ca.phon.syllabifier.*;
import ca.phon.orthography.*;
import ca.phon.project.*;
import ca.phon.session.*;
import ca.phon.extensions.*;
import ca.phon.formatter.*;
import ca.phon.visitor.*;
import ca.phon.worker.*;
import ca.phon.plugin.*;

import java.util.Calendar;
import java.util.TimeZone;
import java.text.ParseException;
import java.util.Map;
import java.util.HashMap;
import java.util.logging.*;

import java.time.*;

import javax.xml.datatype.*;

import org.apache.commons.lang3.*;
}

@members {
	private final static Logger LOGGER = Logger.getLogger("ca.phon.phontalk.parser");

	/** Default IPhonFactory */
	private SessionFactory sessionFactory = 
		SessionFactory.newFactory();

	/** Session */
	private Session session = 
		sessionFactory.createSession();

	public Session getSession() { return session; }
	
	private int recordIndex = 0;
	
	public void reportError(RecognitionException e) {
		throw new TreeWalkerError(e);
	}
	
	private TierDescription ensureTierExists(String tierName, boolean grouped) {
		TierDescription tierDesc = null;
		for(TierDescription current:session.getUserTiers())
		{
			if(current.isGrouped() == grouped && current.getName().equals(tierName))
			{
				tierDesc = current;
				break;
			}
		}
		
		if(tierDesc == null) {
			// create the new tier
			tierDesc = sessionFactory.createTierDescription(tierName, grouped, String.class);
			session.addUserTier(tierDesc);
			
			TierViewItem tvi = sessionFactory.createTierViewItem(tierName, true, "default");
			List<TierViewItem> tierView = new ArrayList<>(session.getTierView());
			tierView.add(tvi);
			session.setTierView(tierView);
		}
		return tierDesc;
	}
}
]]>
    </buffer>

    <buffer name="Phon2XmlWalker.g">
        <![CDATA[
tree grammar Phon2XmlWalker;

options
{
	ASTLabelType = CommonTree ;
	tokenVocab = Chat ;
	output = template;
	superClass=PhonTalkTreeParser;
}

@header {
package ca.phon.phontalk.parser;

import ca.phon.phontalk.*;

import java.util.logging.*;

}

@members {
private final static Logger LOGGER = Logger.getLogger("ca.phon.phontalk.parser");

private int recordIndex = 0;

public int getRecordNumber() {
	return recordIndex+1;
}

public void reportError(RecognitionException e) {
	throw new TreeWalkerError(e);
}

}

]]>
    </buffer>

    <!-- The next file(s) to include -->
    <include>chat.xml</include>

</chunk>
